// FILE: src/components/vault/VaultPdfDossier.tsx

import React from 'react';
import { Page, Text, View, Document, StyleSheet, Image, Font } from '@react-pdf/renderer';
import type { VaultItem } from '@/pages/Vault';

// Register fonts - this is important for consistent rendering
// In a real app, you might host these fonts with your project files
Font.register({
  family: 'Inter',
  fonts: [
    { src: 'https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1ZL7.woff2', fontWeight: 400 },
    { src: 'https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1ZL7.woff2', fontWeight: 600 },
    { src: 'https://fonts.gstatic.com/s/inter/v12/UcC73FwrK3iLTeHuS_fvQtMwCp50KnMa1ZL7.woff2', fontWeight: 700 },
  ],
});

const styles = StyleSheet.create({
  page: {
    fontFamily: 'Inter',
    padding: '40px 40px',
    backgroundColor: '#ffffff',
    color: '#1a202c',
  },
  header: {
    textAlign: 'center',
    marginBottom: 30,
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
  },
  subtitle: {
    fontSize: 12,
    color: '#718096',
    marginTop: 4,
  },
  summaryPage: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    alignItems: 'center',
    height: '80%',
  },
  summaryBox: {
    border: '1px solid #e2e8f0',
    backgroundColor: '#f7fafc',
    padding: '40px',
    borderRadius: 8,
    textAlign: 'center',
  },
  summaryLabel: {
    fontSize: 16,
    color: '#4a5568',
  },
  summaryValue: {
    fontSize: 32,
    fontWeight: 'bold',
    marginTop: 8,
  },
  itemPage: {
    display: 'flex',
    flexDirection: 'column',
  },
  itemImage: {
    width: '100%',
    height: 300,
    objectFit: 'contain',
    borderRadius: 8,
    marginBottom: 20,
  },
  itemTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  detailGrid: {
    display: 'flex',
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  detailItem: {
    width: '50%',
    marginBottom: 12,
  },
  detailLabel: {
    fontSize: 10,
    color: '#718096',
    textTransform: 'uppercase',
  },
  detailValue: {
    fontSize: 12,
    marginTop: 2,
  },
  notesSection: {
    marginTop: 20,
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 40,
    right: 40,
    textAlign: 'center',
    fontSize: 9,
    color: '#a0aec0',
  },
});

interface VaultPdfDossierProps {
  items: VaultItem[];
}

export const VaultPdfDossier: React.FC<VaultPdfDossierProps> = ({ items }) => {
  const totalValue = items.reduce((acc, item) => {
    const value = item.owner_valuation || parseFloat(item.valuation_data?.estimatedValue) || 0;
    return acc + value;
  }, 0);

  return (
    <Document>
      {/* Cover Page */}
      <Page size="A4" style={styles.page}>
        <View style={styles.header}>
          <Text style={styles.title}>Personal Asset Dossier</Text>
          <Text style={styles.subtitle}>Generated by Tagnetiq Aegis Vault on {new Date().toLocaleDateString()}</Text>
        </View>
        <View style={styles.summaryPage}>
            <View style={styles.summaryBox}>
                <Text style={styles.summaryLabel}>Total Assets</Text>
                <Text style={styles.summaryValue}>{items.length}</Text>
                <Text style={[styles.summaryLabel, { marginTop: 20 }]}>Total Declared Value</Text>
                <Text style={styles.summaryValue}>
                    {totalValue.toLocaleString('en-US', { style: 'currency', currency: 'USD' })}
                </Text>
            </View>
        </View>
        <Text style={styles.footer}>Confidential | Page 1</Text>
      </Page>

      {/* Individual Item Pages */}
      {items.map((item, index) => (
        <Page size="A4" style={styles.page} key={item.id}>
          <View style={styles.itemPage}>
            {item.photos && item.photos[0] && (
                <Image style={styles.itemImage} src={item.photos[0]} />
            )}
            <Text style={styles.itemTitle}>{item.asset_name}</Text>

            <View style={styles.detailGrid}>
                <View style={styles.detailItem}>
                    <Text style={styles.detailLabel}>Declared Value</Text>
                    <Text style={styles.detailValue}>
                        {(item.owner_valuation || parseFloat(item.valuation_data?.estimatedValue) || 0)
                            .toLocaleString('en-US', { style: 'currency', currency: 'USD' })}
                    </Text>
                </View>
                 <View style={styles.detailItem}>
                    <Text style={styles.detailLabel}>Valuation Method</Text>
                    <Text style={styles.detailValue}>{item.owner_valuation ? 'Owner Valuation' : 'AI Valuation'}</Text>
                </View>
                <View style={styles.detailItem}>
                    <Text style={styles.detailLabel}>Serial Number</Text>
                    <Text style={styles.detailValue}>{item.serial_number || 'N/A'}</Text>
                </View>
                 <View style={styles.detailItem}>
                    <Text style={styles.detailLabel}>Date Added</Text>
                    <Text style={styles.detailValue}>{new Date(item.created_at).toLocaleDateString()}</Text>
                </View>
            </View>

            {item.notes && (
                 <View style={styles.notesSection}>
                    <Text style={styles.detailLabel}>Notes</Text>
                    <Text style={styles.detailValue}>{item.notes}</Text>
                </View>
            )}
          </View>
          <Text style={styles.footer}>Confidential | Page {index + 2}</Text>
        </Page>
      ))}
    </Document>
  );
};
